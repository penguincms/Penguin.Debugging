<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penguin.Debugging</name>
    </assembly>
    <members>
        <member name="T:Penguin.Debugging.AsyncStringWriter">
            <summary>
            An asyncronous string writer class. Accepts text into a queue, and uses a background thread to flush the text to a provided func for processing
            </summary>
        </member>
        <member name="M:Penguin.Debugging.AsyncStringWriter.#ctor(System.Action{System.String})">
            <summary>
            Creates a new instance of the string writer class
            </summary>
            <param name="action">A function that should be the target of the processing background thread.</param>
        </member>
        <member name="M:Penguin.Debugging.AsyncStringWriter.Dispose">
            <summary>
            Disposes of the class, and flushes the queue
            </summary>
        </member>
        <member name="M:Penguin.Debugging.AsyncStringWriter.Enqueue(System.String)">
            <summary>
            Adds a new line of text to the internal queue, to be flushed by the background thread
            </summary>
            <param name="toEnque">The string to Enqueue</param>
        </member>
        <member name="M:Penguin.Debugging.AsyncStringWriter.Dispose(System.Boolean)">
            <summary>
            Disposes of the class, and flushes the queue
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Penguin.Debugging.LogWriter">
            <summary>
            Logs everything, everywhere
            </summary>
        </member>
        <member name="P:Penguin.Debugging.LogWriter.Directory">
            <summary>
            The Directory that any log files are written to
            </summary>
        </member>
        <member name="P:Penguin.Debugging.LogWriter.LogFileFullName">
            <summary>
            Log file full path and file name
            </summary>
        </member>
        <member name="P:Penguin.Debugging.LogWriter.LogFileName">
            <summary>
            Constructs a new instance of the log writer
            </summary>
            <summary>
            The name of the file the (if any) disk stream is being written to
            </summary>
        </member>
        <member name="P:Penguin.Debugging.LogWriter.DebugCategory">
            <summary>
            When writing to the debug window, the name of the output that will be used.
            </summary>
        </member>
        <member name="M:Penguin.Debugging.LogWriter.#ctor(Penguin.Debugging.LogWriterSettings)">
            <summary>
            Constructs a new instance of the log file writer with the given settings
            </summary>
            <param name="settings">Any settings to overwrite from default</param>
        </member>
        <member name="M:Penguin.Debugging.LogWriter.Dispose">
            <summary>
            Disposes of the writer and flushes to disk
            </summary>
        </member>
        <member name="M:Penguin.Debugging.LogWriter.Flush">
            <summary>
            Flushes the disk output streamwriter
            </summary>
        </member>
        <member name="M:Penguin.Debugging.LogWriter.WriteLine(System.Object,System.Nullable{Penguin.Debugging.LogOutput})">
            <summary>
            Writes an object or message to the log targets
            </summary>
            <param name="toLog">The object or message to log</param>
            <param name="target">Specific target for this output. If null, uses instance default</param>
        </member>
        <member name="M:Penguin.Debugging.LogWriter.Dispose(System.Boolean)">
            <summary>
            Disposes of the writer and flushes to disk
            </summary>
        </member>
        <member name="T:Penguin.Debugging.LogWriterSettings">
            <summary>
            Class containing the settings to be used for an instance of the log writer
            </summary>
        </member>
        <member name="P:Penguin.Debugging.LogWriterSettings.Compression">
            <summary>
            Compression to use when writing log files to disk
            </summary>
        </member>
        <member name="P:Penguin.Debugging.LogWriterSettings.Directory">
            <summary>
            Output path for the log files. Defaults to "Logs"
            </summary>
        </member>
        <member name="P:Penguin.Debugging.LogWriterSettings.ObjectSerializationMethod">
            <summary>
            The method used to serialized non-string objects. defaults to Auto
            </summary>
        </member>
        <member name="P:Penguin.Debugging.LogWriterSettings.ObjectSerializationOverride">
            <summary>
            An optional method used to override object serialization if additional logic is required (ex json serialization)
            </summary>
        </member>
        <member name="P:Penguin.Debugging.LogWriterSettings.OutputTarget">
            <summary>
            Location that the log lines should be written to. Defaults to "All"
            </summary>
        </member>
        <member name="P:Penguin.Debugging.LogWriterSettings.LogFileName">
            <summary>
            Overrides the default log file name of DateTime + Assembly
            </summary>
        </member>
        <member name="T:Penguin.Debugging.ObjectSerializationMethod">
            <summary>
            Determines how objects passed to the logwriter are serialized
            </summary>
        </member>
        <member name="F:Penguin.Debugging.ObjectSerializationMethod.ToString">
            <summary>
            Call ToString on objects to serialize
            </summary>
        </member>
        <member name="F:Penguin.Debugging.ObjectSerializationMethod.Auto">
            <summary>
            Call ToString if overridden, otherwise call ObjectSerializationOverride
            </summary>
        </member>
        <member name="F:Penguin.Debugging.ObjectSerializationMethod.Override">
            <summary>
            Always call ObjectSerializationOverride
            </summary>
        </member>
        <member name="T:Penguin.Debugging.StaticLogger">
            <summary>
            A static class designed to be the target of debugging messages.
            Contains an endpoint that can be assigned on application start to retrieve any messages that are sent to this class
            Enabling this may greatly slow down the application but is useful for logging low level messages to diagnose problems
            </summary>
        </member>
        <member name="P:Penguin.Debugging.StaticLogger.Endpoint">
            <summary>
            This func should accept the string to be logged, and return whether or not the log was successful.
            If it returns false, the message queue will not be cleared. This is incase the message is logged before
            your output is ready to handle the message. The message is returned as a single new-line seperated string
            for speed
            </summary>
        </member>
        <member name="P:Penguin.Debugging.StaticLogger.IsListening">
            <summary>
            If this bool is false, theres no point in logging anything since its not going anywhere
            </summary>
        </member>
        <member name="P:Penguin.Debugging.StaticLogger.Level">
            <summary>
            This should represent how often messages are flushed to the endpoint
            </summary>
        </member>
        <member name="T:Penguin.Debugging.StaticLogger.LoggingLevel">
            <summary>
            Represents the frequency that messages will be send to the logging endpoint
            </summary>
        </member>
        <member name="F:Penguin.Debugging.StaticLogger.LoggingLevel.None">
            <summary>
            All messages are abandoned. Nothing is queued
            </summary>
        </member>
        <member name="F:Penguin.Debugging.StaticLogger.LoggingLevel.Exception">
            <summary>
            Flushed messages should occur when an exception is logged
            </summary>
        </member>
        <member name="F:Penguin.Debugging.StaticLogger.LoggingLevel.Call">
            <summary>
            All messages are flushed to the end point as they are logged. For diagnosing issues within a logging method
            </summary>
        </member>
        <member name="F:Penguin.Debugging.StaticLogger.LoggingLevel.Method">
            <summary>
            All messages are flushed to the end point when a method returns
            </summary>
        </member>
        <member name="F:Penguin.Debugging.StaticLogger.LoggingLevel.Final">
            <summary>
            Flushed messages should only occur on finalization of a process, for when a process is succeeding but its state is not correct
            </summary>
        </member>
        <member name="M:Penguin.Debugging.StaticLogger.Flush">
            <summary>
            Attempts to flush the message queue to the endpoint. returns false if the endpoint reports a failure
            </summary>
            <returns>false if the endpoint reports a failure</returns>
        </member>
        <member name="M:Penguin.Debugging.StaticLogger.Log(System.String,Penguin.Debugging.StaticLogger.LoggingLevel)">
            <summary>
            Queues a message to be sent to the endpoint
            </summary>
            <param name="toLog">The message to log</param>
            <param name="levelToLog">If the log level is higher (less frequent) than the application has set, it will cause the log to flush</param>
        </member>
        <member name="M:Penguin.Debugging.StaticLogger.Log(System.Exception,Penguin.Debugging.StaticLogger.LoggingLevel)">
            <summary>
            Logs an exception as an Exception level event. Logs stack trace and message recursively
            </summary>
            <param name="ex">The exception to log</param>
            <param name="levelToLog">Allows the level to be overridden</param>
        </member>
    </members>
</doc>
